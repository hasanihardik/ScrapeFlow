generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Workflow{
  id     String @id @default(cuid())
  userId String 
  name   String
  description String?

  definition String
  executionPlan String?
  creditsCost Int @default(0)
  status String
  
  cron String?

  lastRunId String? 
  lastRunStatus String?
  lastRunAt DateTime?
  NextRuntAt DateTime?

  executions WorkflowExecution[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, name])
}
model WorkflowExecution{
  id String @id @default(cuid())
  userId String 
  status String
  trigger String
  createdAt DateTime @default(now())
  startAt DateTime?
  completedAt DateTime?

  definition String @default("{}")
  workflowId String
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  phases ExecutionPhase[]
  creditsConsumed Int? @default(0)
}
model ExecutionPhase{
  id String @id @default(cuid())
  userId String 
  status String
  number Int
  node String
  name String
  startAt DateTime?
  completedAt DateTime?
  inputs String?
  outputs String?
  creditsConsumed Int?
  workflowExecutionId String
  execution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  logs  ExecutionLog[]
}
model ExecutionLog {
  id String @id @default(cuid())
  message String
  logLevel String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase ExecutionPhase @relation(fields: [executionPhaseId],references: [id],onDelete: Cascade)
}
model UserBalance {
  userId String @id
  credits Int @default(300)
}

model StripeCustomer {
  id String @id @default(cuid())
  userId String @unique
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(cuid())
  userId String
  amount Int
  credits Int
  status String
  stripePaymentId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id String @id @default(cuid())
  productId String
  type String // one_time or recurring
  unitAmount Int
  credits Int
  currency String @default("usd")
  active Boolean @default(true)
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Credentials{
  id String @id @default(cuid())
  userId String
  name String
  value String
  createdAt DateTime @default(now())

  @@unique([userId,name])
  
}
